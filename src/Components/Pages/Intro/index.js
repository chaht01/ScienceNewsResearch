import React from "react";
import { connect } from "react-redux";
import { Link } from "react-router-dom";

import { articleArticleFetchRequest } from "../../../Actions/article";
import { questionPoolFetchRequest } from "../../../Actions/question";
import { codeFetchRequest } from "../../../Actions/code";
import { Button } from "semantic-ui-react";
import styled from "styled-components";
import { pageNextRequest } from "../../../Actions/page";
import { PAGES } from "../../../Reducers/page";

import intro from "../../../static/intro.png";

const StyledContainer = styled.div`
  padding-top: 3em;
`;

const StyledIntro = styled.div`
  max-width: 800px;
  margin: auto;
  margin-top: 3em;
  > img {
    max-width: 100%;
  }
`;
const StyledActionBar = styled.div`
  display: flex;
  justify-content: flex-end;
`;
const mapStateToProps = (state, ownProps) => {
  return {
    user_detail: state.authReducer.signup.data,
    page: state.pageReducer.data
  };
};

const mapDispatchToProps = dispatch => {
  return {};
};

const IntroView = ({ user_detail, page, nextPage }) => {
  const {
    id: user_id,
    profile: { article: article_id, research: research_id }
  } = user_detail;
  const { loading } = page;

  const listing = ["1", "a", "i"];
  const instructions = [
    {
      text: "(5 min.) Raise questions before reading the article ",
      children: [
        {
          text:
            "Title of the article will be presented. After reading the title, raise 3 or more questions. "
        },
        {
          text: "Raise questions on what you expect to read from the article.  "
        }
      ]
    },
    {
      text: "(10 min.) Raise questions while reading the article",
      children: [
        { text: "Read the article and raise 3 or more questions. " },
        {
          text:
            "Raise questions on what you want to know but the article does not cover. "
        }
      ]
    },
    {
      text:
        "(5 min.) Answer to 5 or more of othersâ€™ question after reading the article. ",
      children: [
        { text: "You will see questions generated by other users. " },
        {
          text:
            "Answer those questions with the article that you read in the previous step. "
        }
      ]
    }
  ];

  const recursive_listing = (depth, data) => {
    return (
      <ol type={listing[depth % 3]}>
        {data.map(item => {
          return (
            <React.Fragment>
              <li>{item.text}</li>
              {item.children &&
                item.children.length > 0 &&
                recursive_listing(depth + 1, item.children)}
            </React.Fragment>
          );
        })}
      </ol>
    );
  };

  return (
    <StyledIntro>
      <h1>Instruction - Overview</h1>
      In this HIT, you are going to read 1 news story about a scientific
      research. The overall procedure is outlined below. 
      <img src={intro} />
      The main task is composed of 3 steps.
      {recursive_listing(0, instructions)}
      <StyledActionBar>
        <Button
          onClick={nextPage}
          loading={loading}
          disabled={loading}
          positive
        >
          Next
        </Button>
      </StyledActionBar>
    </StyledIntro>
  );
};

const Intro = connect(
  mapStateToProps,
  mapDispatchToProps
)(IntroView);

export default Intro;
